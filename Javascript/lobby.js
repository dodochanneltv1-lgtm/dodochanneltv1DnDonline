// Javascript/lobby.js - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó DM/Player

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î
firebase.auth().onAuthStateChanged(user => {
    if (user) {
        // ‚ú® [‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á] ‡πÉ‡∏ä‡πâ username ‡∏à‡∏≤‡∏Å path 'users' ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
        db.ref('users/' + user.uid).once('value').then((snapshot) => {
            const userData = snapshot.val();
            if (userData && userData.username) {
                document.getElementById('userEmail').textContent = userData.username;
            } else {
                // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏ó‡∏ô
                document.getElementById('userEmail').textContent = user.email.split('@')[0];
            }
        });
        
        loadPublicRooms(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á
    } else {
        window.location.replace('login.html');
    }
});

// --------------------------------------------------------------------------------

// ‚ú® [‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á] ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô createRoom ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ async/await ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° Loading
async function createRoom() {
    const roomName = document.getElementById('roomName').value.trim();
    const roomPassword = document.getElementById('roomPassword').value;
    const dmPassword = document.getElementById('dmPassword').value.trim();
    const user = firebase.auth().currentUser;

    if (!user) {
        return Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á', 'error');
    }
    if (!roomName || !dmPassword) {
        return Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á" ‡πÅ‡∏•‡∏∞ "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô DM Panel"', 'error');
    }

    showLoading('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á...');

    try {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á roomId ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        const roomId = Math.floor(100000 + Math.random() * 900000).toString();

        const userSnapshot = await db.ref('users/' + user.uid).get();
        const username = userSnapshot.val()?.username || 'Unknown DM';

        const roomData = {
            name: roomName,
            dmUid: user.uid,
            dmUsername: username,
            dmPassword: dmPassword,
            createdAt: new Date().toISOString()
        };
        
        if (roomPassword) {
            roomData.password = roomPassword;
        }

        await db.ref('rooms/' + roomId).set(roomData);
        
        hideLoading();

        sessionStorage.setItem('roomId', roomId);
        await Swal.fire('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `ID ‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: ${roomId}`, 'success');
        window.location.href = 'dm-panel.html';

    } catch (error) {
        hideLoading();
        Swal.fire('‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ: ${error.message}`, 'error');
    }
}

// --------------------------------------------------------------------------------

// ‚ú® [‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á] ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô joinRoomSelection ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ async/await ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° Loading
async function joinRoomSelection() {
    const roomId = document.getElementById('roomIdInput').value.trim();
    if (!roomId) {
        return Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏´‡πâ‡∏≠‡∏á', 'error');
    }

    showLoading('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á...');

    try {
        const roomSnapshot = await db.ref(`rooms/${roomId}`).get();

        if (!roomSnapshot.exists()) {
            hideLoading();
            return Swal.fire('‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á ID: ${roomId}`, 'error');
        }
        
        const roomData = roomSnapshot.val();
        hideLoading(); // ‡∏ã‡πà‡∏≠‡∏ô Loading ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏à‡∏≠‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß

        // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (roomData.password) {
            const { value: password, isConfirmed } = await Swal.fire({
                title: '‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏´‡πâ‡∏≠‡∏á',
                input: 'password',
                inputPlaceholder: '‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á',
                showCancelButton: true,
                confirmButtonText: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
            });

            if (!isConfirmed) return; // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å

            if (password !== roomData.password) {
                return Swal.fire('‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!', 'error');
            }
        }
        
        // 2. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™) ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
        await promptRoleSelection(roomId, roomData);

    } catch(error) {
        hideLoading();
        Swal.fire('‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á: ${error.message}`, 'error');
    }
}

// --------------------------------------------------------------------------------

async function promptRoleSelection(roomId, roomData) {
  const user = firebase.auth().currentUser;
  if (!user) return Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ!', 'error');

  await Swal.fire({
    title: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó',
    html: `
      <div style="display:flex; flex-direction:column; gap:10px; margin-top:10px;">
        <button id="swal-player-btn" class="swal2-confirm swal2-styled" type="button" style="/* ‡∏•‡∏ö inline style ‡∏ó‡∏¥‡πâ‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ CSS ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ó‡∏ô */">
          <span class="emoji-icon">üõ°Ô∏è</span> ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 
        </button>
        <button id="swal-dm-btn" class="swal2-deny swal2-styled" type="button" style="/* ‡∏•‡∏ö inline style ‡∏ó‡∏¥‡πâ‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ CSS ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ó‡∏ô */">
          <span class="emoji-icon">üßô‚Äç‚ôÇÔ∏è</span> DM PANEL
        </button>
        <button id="swal-cancel-btn" class="swal2-cancel swal2-styled" type="button" style="/* ‡∏•‡∏ö inline style ‡∏ó‡∏¥‡πâ‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ CSS ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ó‡∏ô */">
          <span class="emoji-icon">‚ùå</span> ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        </button>
      </div>
    `,
    // ‚ùå ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á SweetAlert2
    showConfirmButton: false,
    showCancelButton: false,
    showDenyButton: false,
    allowOutsideClick: false,
    allowEscapeKey: true,

    didOpen: (modal) => {
      modal.querySelector('#swal-player-btn').addEventListener('click', () => {
        sessionStorage.setItem('roomId', roomId);
        localStorage.setItem('currentUserUid', user.uid);
        Swal.close();
        window.location.href = 'player-dashboard.html';
      });

      modal.querySelector('#swal-dm-btn').addEventListener('click', async () => {
        Swal.close();
        await promptDmConfirmation(roomId, roomData);
      });

      modal.querySelector('#swal-cancel-btn').addEventListener('click', () => {
        Swal.close();
      });
    }
  });
}



// --------------------------------------------------------------------------------

async function promptDmConfirmation(roomId, roomData) {
    const user = firebase.auth().currentUser;

    // ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå DM
    /*if (user.uid !== roomData.dmUid) {
        return Swal.fire('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï', '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà DM ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ', 'error');
    }*/
    
    const { value: password, isConfirmed } = await Swal.fire({
        title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå DM',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô DM Panel',
        input: 'password',
        
        
        showDenyButton: false, 
        
        showCancelButton: true,
        confirmButtonText: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà DM Panel',
        cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', 
    });

    if (isConfirmed) {
        if (password === roomData.dmPassword) {
            sessionStorage.setItem('roomId', roomId);
            await Swal.fire('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà DM Panel', 'success');
            window.location.href = 'dm-panel.html';
        } else {
            Swal.fire('‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô DM ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!', 'error');
        }
    }
}

// --------------------------------------------------------------------------------

function loadPublicRooms() {
    const roomsRef = db.ref('rooms');
    const roomsList = document.getElementById('publicRoomsList');

    roomsRef.on('value', (snapshot) => {
        roomsList.innerHTML = ''; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πà‡∏≤
        const rooms = snapshot.val();

        if (!rooms) {
            roomsList.innerHTML = '<li>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏î‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á</li>';
            return;
        }

        let hasAnyRoom = false;
        for (const roomId in rooms) {
            const roomData = rooms[roomId];
            hasAnyRoom = true;
            
            const isLocked = roomData.password ? ' (üîí ‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™)' : ' (üîì ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞)';
            const li = document.createElement('li');
            
            // üêû [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å dmEmail ‡πÄ‡∏õ‡πá‡∏ô dmUsername
            li.innerHTML = `<strong>${roomData.name}</strong>${isLocked} (DM: ${roomData.dmUsername}) <br> <small>ID: ${roomId}</small>`; 
            
            li.onclick = () => {
                document.getElementById('roomIdInput').value = roomId;
                joinRoomSelection(); 
            };
            roomsList.appendChild(li);
        }
        
        if (!hasAnyRoom) {
            roomsList.innerHTML = '<li>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏î‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á</li>';
        }
    });
}